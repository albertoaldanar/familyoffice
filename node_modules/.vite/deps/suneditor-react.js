import {
  require_react
} from "./chunk-ZLZLTJQL.js";
import {
  __commonJS,
  __require
} from "./chunk-2LSFTFF7.js";

// node_modules/suneditor-react/dist/lang/getLanguage.js
var require_getLanguage = __commonJS({
  "node_modules/suneditor-react/dist/lang/getLanguage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var getLanguage = function(lang) {
      switch (typeof lang) {
        case "object":
          return lang;
        case "string":
          return __require("suneditor/src/lang/".concat(lang, ".js"));
        default:
          return void 0;
      }
    };
    exports.default = getLanguage;
  }
});

// node_modules/suneditor-react/dist/data/events.js
var require_events = __commonJS({
  "node_modules/suneditor-react/dist/data/events.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uploadBeforeEvents = exports.events = void 0;
    exports.events = [
      "onMouseDown",
      "onScroll",
      "onInput",
      "onClick",
      "onKeyUp",
      "onKeyDown",
      "onFocus",
      "onImageUpload",
      "onAudioUpload",
      "onVideoUpload",
      "onImageUploadError",
      "onVideoUploadError",
      "onAudioUploadError",
      "onSave",
      "onSetToolbarButtons",
      "imageUploadHandler",
      "toggleCodeView",
      "toggleFullScreen",
      "showInline",
      "showController",
      "onCopy",
      "onCut",
      "onDrop",
      "onPaste"
    ];
    exports.uploadBeforeEvents = [
      "onImageUploadBefore",
      "onVideoUploadBefore",
      "onAudioUploadBefore"
    ];
  }
});

// node_modules/suneditor-react/dist/components/SunEditor.js
var require_SunEditor = __commonJS({
  "node_modules/suneditor-react/dist/components/SunEditor.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var plugins_1 = __importDefault("suneditor/src/plugins");
    var suneditor_1 = __importDefault("suneditor");
    var getLanguage_1 = __importDefault(require_getLanguage());
    var events_1 = require_events();
    var SunEditor = function(props) {
      var name = props.name, lang = props.lang, _a = props.setOptions, setOptions = _a === void 0 ? {} : _a, placeholder = props.placeholder, _b = props.width, width = _b === void 0 ? "100%" : _b, height = props.height, defaultValue = props.defaultValue, setContents = props.setContents, setDefaultStyle = props.setDefaultStyle, getSunEditorInstance = props.getSunEditorInstance, appendContents = props.appendContents, _c = props.setAllPlugins, setAllPlugins = _c === void 0 ? true : _c, _d = props.disable, disable = _d === void 0 ? false : _d, _e = props.readOnly, readOnly = _e === void 0 ? false : _e, _f = props.hide, hide = _f === void 0 ? false : _f, _g = props.hideToolbar, hideToolbar = _g === void 0 ? false : _g, _h = props.disableToolbar, disableToolbar = _h === void 0 ? false : _h, onChange = props.onChange, autoFocus = props.autoFocus, onBlur = props.onBlur, onLoad = props.onLoad;
      var txtArea = (0, react_1.useRef)(null);
      var editor = (0, react_1.useRef)(null);
      var initialEffect = (0, react_1.useRef)(true);
      (0, react_1.useEffect)(function() {
        var _a2;
        var options = __assign(__assign({}, setOptions), { lang: lang ? (0, getLanguage_1.default)(lang) : setOptions.lang, width: width !== null && width !== void 0 ? width : setOptions.width, placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : setOptions.placeholder, plugins: (_a2 = setOptions.plugins) !== null && _a2 !== void 0 ? _a2 : setAllPlugins ? plugins_1.default : void 0, height: height !== null && height !== void 0 ? height : setOptions.height, value: defaultValue !== null && defaultValue !== void 0 ? defaultValue : setOptions.value, defaultStyle: setDefaultStyle !== null && setDefaultStyle !== void 0 ? setDefaultStyle : setOptions.defaultStyle });
        if (name && options.value)
          txtArea.current.value = options.value;
        editor.current = suneditor_1.default.create(txtArea.current, options);
        if (getSunEditorInstance)
          getSunEditorInstance(editor.current);
        editor.current.onload = function(_, reload) {
          if (reload)
            return onLoad === null || onLoad === void 0 ? void 0 : onLoad(reload);
          if (setContents) {
            editor.current.setContents(setContents);
            editor.current.core.focusEdge(null);
          }
          if (appendContents)
            editor.current.appendContents(appendContents);
          if (editor.current.util.isIE)
            editor.current.core._createDefaultRange();
          if (disable)
            editor.current.disable();
          if (readOnly)
            editor.current.readOnly(true);
          if (hide)
            editor.current.hide();
          if (hideToolbar)
            editor.current.toolbar.hide();
          if (disableToolbar)
            editor.current.toolbar.disable();
          if (autoFocus === false)
            editor.current.core.context.element.wysiwyg.blur();
          else if (autoFocus)
            editor.current.core.context.element.wysiwyg.focus();
          return onLoad === null || onLoad === void 0 ? void 0 : onLoad(reload);
        };
        editor.current.onChange = function(content) {
          if (name && txtArea.current)
            txtArea.current.value = content;
          if (onChange)
            onChange(content);
        };
        if (onBlur) {
          editor.current.onBlur = function(e) {
            return onBlur(e, editor.current.getContents(true));
          };
        }
        events_1.uploadBeforeEvents.forEach(function(event) {
          var value = props[event];
          if (editor.current && value)
            editor.current[event] = function(files, info, _, uploadHandler) {
              return value(files, info, uploadHandler);
            };
        });
        events_1.events.forEach(function(event) {
          var value = props[event];
          if (value && editor.current) {
            editor.current[event] = value;
          }
        });
        return function() {
          if (editor.current)
            editor.current.destroy();
          editor.current = null;
        };
      }, []);
      (0, react_1.useEffect)(function() {
        var _a2;
        if (initialEffect.current)
          return;
        (_a2 = editor.current) === null || _a2 === void 0 ? void 0 : _a2.setOptions({
          lang: (0, getLanguage_1.default)(lang)
        });
      }, [lang]);
      (0, react_1.useEffect)(function() {
        var _a2;
        if (initialEffect.current)
          return;
        (_a2 = editor.current) === null || _a2 === void 0 ? void 0 : _a2.setOptions({
          placeholder,
          height,
          width
        });
      }, [placeholder, height, width]);
      (0, react_1.useEffect)(function() {
        var _a2;
        if (setDefaultStyle && !initialEffect.current)
          (_a2 = editor.current) === null || _a2 === void 0 ? void 0 : _a2.setDefaultStyle(setDefaultStyle);
      }, [setDefaultStyle]);
      (0, react_1.useEffect)(function() {
        var _a2, _b2;
        if (!initialEffect.current && setContents !== void 0 && !((_a2 = editor.current) === null || _a2 === void 0 ? void 0 : _a2.core.hasFocus)) {
          (_b2 = editor.current) === null || _b2 === void 0 ? void 0 : _b2.setContents(setContents);
        }
      }, [setContents]);
      (0, react_1.useEffect)(function() {
        var _a2, _b2, _c2;
        if (!initialEffect.current && appendContents !== void 0 && !((_a2 = editor.current) === null || _a2 === void 0 ? void 0 : _a2.core.hasFocus)) {
          (_b2 = editor.current) === null || _b2 === void 0 ? void 0 : _b2.appendContents(appendContents);
          (_c2 = editor.current) === null || _c2 === void 0 ? void 0 : _c2.core.focusEdge(null);
        }
      }, [appendContents]);
      (0, react_1.useEffect)(function() {
        var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _j;
        if (initialEffect.current)
          return;
        (_a2 = editor.current) === null || _a2 === void 0 ? void 0 : _a2.readOnly(readOnly);
        if (hideToolbar)
          (_b2 = editor.current) === null || _b2 === void 0 ? void 0 : _b2.toolbar.hide();
        else
          (_c2 = editor.current) === null || _c2 === void 0 ? void 0 : _c2.toolbar.show();
        if (disableToolbar)
          (_d2 = editor.current) === null || _d2 === void 0 ? void 0 : _d2.toolbar.disable();
        else
          (_e2 = editor.current) === null || _e2 === void 0 ? void 0 : _e2.toolbar.enable();
        if (disable)
          (_f2 = editor.current) === null || _f2 === void 0 ? void 0 : _f2.disable();
        else
          (_g2 = editor.current) === null || _g2 === void 0 ? void 0 : _g2.enable();
        if (hide)
          (_h2 = editor.current) === null || _h2 === void 0 ? void 0 : _h2.hide();
        else
          (_j = editor.current) === null || _j === void 0 ? void 0 : _j.show();
      }, [disable, hideToolbar, disableToolbar, hide, readOnly]);
      (0, react_1.useEffect)(function() {
        initialEffect.current = false;
      }, []);
      return react_1.default.createElement("textarea", __assign({ style: { visibility: "hidden" }, ref: txtArea }, { name }));
    };
    exports.default = SunEditor;
  }
});

// node_modules/suneditor-react/dist/buttons/buttonList.js
var require_buttonList = __commonJS({
  "node_modules/suneditor-react/dist/buttons/buttonList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatting = exports.complex = exports.basic = void 0;
    exports.basic = [
      ["font", "fontSize"],
      ["fontColor"],
      ["horizontalRule"],
      ["link", "image"]
    ];
    exports.complex = [
      ["undo", "redo"],
      ["font", "fontSize", "formatBlock"],
      ["bold", "underline", "italic", "strike", "subscript", "superscript"],
      ["removeFormat"],
      "/",
      ["fontColor", "hiliteColor"],
      ["outdent", "indent"],
      ["align", "horizontalRule", "list", "table"],
      ["link", "image", "video"],
      ["fullScreen", "showBlocks", "codeView"],
      ["preview", "print"],
      ["save", "template"]
    ];
    exports.formatting = [
      ["undo", "redo"],
      ["bold", "underline", "italic", "strike", "subscript", "superscript"],
      ["removeFormat"],
      ["outdent", "indent"],
      ["fullScreen", "showBlocks", "codeView"],
      ["preview", "print"]
    ];
  }
});

// node_modules/suneditor-react/dist/index.js
var require_dist = __commonJS({
  "node_modules/suneditor-react/dist/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buttonList = void 0;
    var SunEditor_1 = __importDefault(require_SunEditor());
    exports.buttonList = __importStar(require_buttonList());
    exports.default = SunEditor_1.default;
  }
});
export default require_dist();
//# sourceMappingURL=suneditor-react.js.map
