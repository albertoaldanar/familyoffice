{
  "version": 3,
  "sources": ["../../zero-fill/index.js", "../../hh-mm-ss/index.js"],
  "sourcesContent": ["/*! zero-fill. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/**\n * Given a number, return a zero-filled string.\n * From http://stackoverflow.com/questions/1267283/\n * @param  {number} width\n * @param  {number} number\n * @return {string}\n */\nmodule.exports = function zeroFill (width, number, pad) {\n  if (number === undefined) {\n    return function (number, pad) {\n      return zeroFill(width, number, pad)\n    }\n  }\n  if (pad === undefined) pad = '0'\n  width -= number.toString().length\n  if (width > 0) return new Array(width + (/\\./.test(number) ? 2 : 1)).join(pad) + number\n  return number + ''\n}\n", "'use strict'\n\nmodule.exports = {\n  fromMs,\n  fromS,\n  toMs,\n  toS\n}\n\nconst zeroFill = require('zero-fill')\n\n// Time units with their corresponding values in miliseconds\nconst HOUR = 3600000\nconst MINUTE = 60000\nconst SECOND = 1000\n\nconst TIME_FORMAT_ERRMSG = 'Time format error'\n\n// =============================================================================\n// Export functions\n// =============================================================================\n\nfunction fromMs (ms, format = 'mm:ss') {\n  if (typeof ms !== 'number' || Number.isNaN(ms)) {\n    throw new Error('NaN error')\n  }\n\n  let absMs = Math.abs(ms)\n\n  let negative = (ms < 0)\n  let hours = Math.floor(absMs / HOUR)\n  let minutes = Math.floor(absMs % HOUR / MINUTE)\n  let seconds = Math.floor(absMs % MINUTE / SECOND)\n  let miliseconds = Math.floor(absMs % SECOND)\n\n  return formatTime({\n    negative, hours, minutes, seconds, miliseconds\n  }, format)\n}\n\nfunction fromS (s, format = 'mm:ss') {\n  if (typeof s !== 'number' || Number.isNaN(s)) {\n    throw new Error('NaN error')\n  }\n\n  let ms = s * SECOND\n\n  return fromMs(ms, format)\n}\n\nfunction toMs (time, format = 'mm:ss') {\n  let re\n\n  if (['mm:ss', 'mm:ss.sss', 'hh:mm:ss', 'hh:mm:ss.sss'].includes(format)) {\n    re = /^(-)?(?:(\\d\\d+):)?(\\d\\d):(\\d\\d)(\\.\\d+)?$/\n  } else if (format === 'hh:mm') {\n    re = /^(-)?(\\d\\d):(\\d\\d)(?::(\\d\\d)(?:(\\.\\d+))?)?$/\n  } else {\n    throw new Error(TIME_FORMAT_ERRMSG)\n  }\n\n  let result = re.exec(time)\n  if (!result) throw new Error()\n\n  let negative = result[1] === '-'\n  let hours = result[2] | 0\n  let minutes = result[3] | 0\n  let seconds = result[4] | 0\n  let miliseconds = Math.floor(1000 * result[5] | 0)\n\n  if (minutes > 60 || seconds > 60) {\n    throw new Error()\n  }\n\n  return (negative ? -1 : 1) * (\n    hours * HOUR + minutes * MINUTE + seconds * SECOND + miliseconds\n  )\n}\n\nfunction toS (time, format = 'mm:ss') {\n  let ms = toMs(time, format)\n  return Math.floor(ms / SECOND)\n}\n\n// =============================================================================\n// Utility functions\n// =============================================================================\n\nfunction formatTime (time, format) {\n  let showMs\n  let showSc\n  let showHr\n\n  switch (format.toLowerCase()) {\n    case 'hh:mm:ss.sss':\n      showMs = true\n      showSc = true\n      showHr = true\n      break\n    case 'hh:mm:ss':\n      showMs = !(!time.miliseconds)\n      showSc = true\n      showHr = true\n      break\n    case 'hh:mm':\n      showMs = !(!time.miliseconds)\n      showSc = showMs || !(!time.seconds)\n      showHr = true\n      break\n    case 'mm:ss':\n      showMs = !(!time.miliseconds)\n      showSc = true\n      showHr = !(!time.hours)\n      break\n    case 'mm:ss.sss':\n      showMs = true\n      showSc = true\n      showHr = !(!time.hours)\n      break\n    default:\n      throw new Error(TIME_FORMAT_ERRMSG)\n  }\n\n  let hh = zeroFill(2, time.hours)\n  let mm = zeroFill(2, time.minutes)\n  let ss = zeroFill(2, time.seconds)\n  let sss = zeroFill(3, time.miliseconds)\n\n  return (time.negative ? '-' : '') + (showHr ? (\n    showMs ? `${hh}:${mm}:${ss}.${sss}` : showSc ? `${hh}:${mm}:${ss}` : `${hh}:${mm}`\n  ) : (\n    showMs ? `${mm}:${ss}.${sss}` : `${mm}:${ss}`\n  ))\n}\n"],
  "mappings": "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",
  "names": ["number", "pad"]
}
